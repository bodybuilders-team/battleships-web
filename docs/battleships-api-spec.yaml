openapi: 3.0.3
info:
  title: Battleships API
  version: 0.0.1
  description: Web-based system that allows multiple players to play the Battleship game.

servers:
  - url: http://localhost:8888
    description: Local server

tags:
  - name: Home
    description: Home page

  - name: Users
    description: Operations about users

  - name: Games
    description: Operations about games

  - name: Players
    description: Operations about players (players are users who are playing a game)


paths:
  /:
    get:
      tags:
        - Home
      summary: Home page
      operationId: home
      responses:
        200:
          description: Home page
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/GetHomeOutputModel'

  /users:
    get:
      tags:
        - Users
      summary: Get all users
      operationId: getUsers
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        200:
          description: Object containing all users
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/GetUsersOutputModel'
    post:
      tags:
        - Users
      summary: Register user
      operationId: register
      requestBody:
        description: User registration information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserInputModel'
      responses:
        201:
          description: User was created
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/RegisterUserOutputModel'

  /users/login:
    post:
      tags:
        - Users
      summary: Logs a user in
      operationId: login
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserInputModel'
      responses:
        200:
          description: User was logged in
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/LoginUserOutputModel'

  /users/logout:
    post:
      tags:
        - Users
      summary: Logs a user out
      operationId: logout
      responses:
        200:
          description: User was logged out
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/LogoutUserOutputModel'

  /users/refresh-token:
    post:
      tags:
        - Users
      summary: Refreshes a user's token
      operationId: refreshToken
      requestBody:
        description: Refresh token
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenInputModel'
      responses:
        200:
          description: User's token was refreshed
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/RefreshTokenOutputModel'

  /users/{username}:
    get:
      tags:
        - Users
      summary: Gets a user by username
      operationId: getUser
      parameters:
        - $ref: '#/components/parameters/usernameParam'
      responses:
        200:
          description: User was found
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/GetUserOutputModel'

  /games:
    get:
      tags:
        - Games
      summary: Gets all games
      operationId: getGames
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
      responses:
        200:
          description: Games were found
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/GetGamesOutputModel'

    post:
      tags:
        - Games
      summary: Create a game
      operationId: createGame
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Created game object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGameInputModel'
      responses:
        201:
          description: Game was created
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/CreateGameOutputModel'

  /games/matchmake:
    post:
      tags:
        - Games
      summary: Matchmake a game
      operationId: matchmake
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Configuration of the game to be matched
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameConfigModel'
      responses:
        200:
          description: Game was found
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/MatchmakeOutputModel'

  /games/{gameId}:
    get:
      tags:
        - Games
      summary: Gets a game by id
      operationId: getGame
      parameters:
        - $ref: '#/components/parameters/gameIdParam'
      responses:
        200:
          description: Game was found
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/GetGameOutputModel'

  /games/{gameId}/state:
    get:
      tags:
        - Games
      summary: Gets a game state by id
      operationId: getGameState
      parameters:
        - $ref: '#/components/parameters/gameIdParam'
      responses:
        200:
          description: Game was found
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/GetGameStateOutputModel'

  /games/{gameId}/join:
    post:
      tags:
        - Games
      summary: Join a game
      operationId: joinGame
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/gameIdParam'
      responses:
        200:
          description: User joined the game
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/JoinGameOutputModel'

  /games/{gameId}/players/self/fleet:
    get:
      tags:
        - Players
      summary: Gets the player's fleet
      operationId: getFleet
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/gameIdParam'
      responses:
        200:
          description: Game was found
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/GetFleetOutputModel'

    post:
      tags:
        - Players
      summary: Deploy a fleet
      operationId: deployFleet
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/gameIdParam'
      requestBody:
        description: Fleet object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeployFleetInputModel'
      responses:
        200:
          description: Fleet was deployed
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/DeployFleetOutputModel'

  /games/{gameId}/players/self/board:
    get:
      tags:
        - Players
      summary: Gets the player's board
      operationId: getBoard
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/gameIdParam'
      responses:
        200:
          description: Game was found
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/GetBoardOutputModel'

  /games/{gameId}/players/opponent/fleet:
    get:
      tags:
        - Players
      summary: Gets the opponent's fleet
      operationId: getOpponentFleet
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/gameIdParam'
      responses:
        200:
          description: Game was found
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/GetOpponentFleetOutputModel'

  /games/{gameId}/players/self/shots:
    get:
      tags:
        - Players
      summary: Gets the player's shots
      operationId: getShots
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/gameIdParam'
      responses:
        200:
          description: Game was found
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/GetShotsOutputModel'

    post:
      tags:
        - Players
      summary: Fire shots
      operationId: fireShots
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/gameIdParam'
      requestBody:
        description: Shots object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateShotsInputModel'
      responses:
        201:
          description: Fleet was deployed
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/CreateShotsOutputModel'

  /games/{gameId}/players/opponent/shots:
    get:
      tags:
        - Players
      summary: Gets the opponent's shots
      operationId: getOpponentShots
      security:
        - bearerAuth: [ ]
      parameters:
        - $ref: '#/components/parameters/gameIdParam'
      responses:
        200:
          description: Game was found
          content:
            'application/vnd.siren+json':
              schema:
                allOf:
                  - $ref: '#/components/schemas/Entity'
                  - properties:
                      properties:
                        $ref: '#/components/schemas/GetOpponentShotsOutputModel'


components:
  schemas:
    GetHomeOutputModel:
      type: object
      properties:
        title:
          type: string
        version:
          type: string
        description:
          type: string
        authors:
          type: array
          items:
            $ref: '#/components/schemas/AuthorModel'
        repository:
          $ref: '#/components/schemas/VCRepositoryModel'

    AuthorModel:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        github:
          type: string

    VCRepositoryModel:
      type: object
      properties:
        type:
          type: string
        url:
          type: string

    RegisterUserOutputModel:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string

    RegisterUserInputModel:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string

    RefreshTokenOutputModel:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string

    RefreshTokenInputModel:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string

    LogoutUserInputModel:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string

    LoginUserOutputModel:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string

    LoginUserInputModel:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string

    GetUsersOutputModel:
      type: object
      properties:
        totalCount:
          type: integer

    GetUserOutputModel:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        points:
          type: integer

    PlayerModel:
      type: object
      properties:
        username:
          type: string
        points:
          type: integer

    GameStateModel:
      type: object
      properties:
        phase:
          type: string
        phaseEndTime:
          type: integer
        round:
          type: integer
        turn:
          type: string
        winner:
          type: string

    GameConfigModel:
      type: object
      required:
        - gridSize
        - maxTimeForLayoutPhase
        - shotsPerRound
        - maxTimePerShot
        - shipTypes
      properties:
        gridSize:
          type: integer
        maxTimeForLayoutPhase:
          type: integer
        shotsPerRound:
          type: integer
        maxTimePerShot:
          type: integer
        shipTypes:
          type: array
          items:
            $ref: '#/components/schemas/ShipTypeModel'

    MatchmakeOutputModel:
      type: object
      properties:
        wasCreated:
          type: boolean

    JoinGameOutputModel:
      type: object
      properties:
        gameId:
          type: integer

    GetGameStateOutputModel:
      $ref: '#/components/schemas/GameStateModel'

    GetGamesOutputModel:
      type: object
      properties:
        totalCount:
          type: integer

    GetGameOutputModel:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        creator:
          type: string
        config:
          $ref: '#/components/schemas/GameConfigModel'
        state:
          $ref: '#/components/schemas/GameStateModel'
        players:
          type: array
          items:
            $ref: '#/components/schemas/PlayerModel'

    CreateGameInputModel:
      type: object
      required:
        - name
        - config
      properties:
        name:
          type: string
        config:
          $ref: '#/components/schemas/GameConfigModel'

    DeployedShipModel:
      type: object
      properties:
        type:
          type: string
        coordinate:
          $ref: '#/components/schemas/CoordinateModel'
        orientation:
          type: string
        lives:
          type: integer

    GetShotsOutputModel:
      $ref: '#/components/schemas/FiredShotsModel'

    GetOpponentShotsOutputModel:
      $ref: '#/components/schemas/FiredShotsModel'

    GetOpponentFleetOutputModel:
      $ref: '#/components/schemas/GetFleetOutputModel'

    GetFleetOutputModel:
      type: object
      properties:
        ships:
          type: array
          items:
            $ref: '#/components/schemas/DeployedShipModel'

    GetBoardOutputModel:
      type: object
      properties:
        board:
          type: array
          items:
            type: string

    FireShotsOutputModel:
      $ref: '#/components/schemas/FiredShotsModel'

    FireShotsInputModel:
      type: object
      required:
        - shots
      properties:
        shots:
          type: array
          items:
            $ref: '#/components/schemas/UnfiredShotModel'

    DeployFleetOutputModel:
      type: object
      properties:
        successfullyDeployed:
          type: boolean

    DeployFleetInputModel:
      type: object
      required:
        - ships
      properties:
        ships:
          type: array
          items:
            $ref: '#/components/schemas/UndeployedShipModel'

    # Siren Base Models
    Entity:
      type: object
      properties:
        class:
          type: array
          items:
            type: string
        properties:
          type: object
          additionalProperties: true
        entities:
          type: array
          items:
            $ref: '#/components/schemas/SubEntity'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'

    SubEntity:
      type: object
      required:
        - rel
      properties:
        class:
          type: array
          items:
            type: string
        rel:
          type: array
          items:
            type: string
        href:
          type: string
        type:
          type: string
        title:
          type: string
        properties:
          type: object
          additionalProperties: true
        entities:
          type: array
          items:
            $ref: '#/components/schemas/SubEntity'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/Action'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'

    Action:
      type: object
      required:
        - name
        - href
      properties:
        name:
          type: string
        title:
          type: string
        method:
          type: string
        href:
          type: string
        type:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'

    Field:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        type:
          type: string
        value:
          type: string
        title:
          type: string

    Link:
      type: object
      required:
        - rel
        - href
      properties:
        rel:
          type: array
          items:
            type: string
        href:
          type: string
        type:
          type: string
        title:
          type: string

  parameters:
    offsetParam:
      name: offset
      in: query
      description: The offset to start from
      required: false
      schema:
        type: integer
        default: 0

    limitParam:
      name: limit
      in: query
      description: The number of items to return
      required: false
      schema:
        type: integer
        default: 10

    gameIdParam:
      name: gameId
      in: path
      description: The id of the game
      required: true
      schema:
        type: integer

    usernameParam:
      name: username
      in: path
      description: The username of the user
      required: true
      schema:
        type: string

  # TODO: responses and error handling
  # TODO: examples

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT