openapi: 3.0.3
info:
  version: 0.0.1
  title: Battleships API
  description: Web-based system that allows multiple players to play the Battleship game.
  termsOfService: https://swagger.io/terms/

servers:
  - url: http://localhost:8888/api

tags:
  - name: Users
    description: Operations about users

  - name: Games
    description: Operations about games

  - name: Players
    description: Operations about players


paths:
  /users:
    post:
      tags:
        - Users
      summary: Create user
      operationId: createUser
      requestBody:
        description: Created user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        201:
          description: User was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
        400:
          $ref: '#/components/responses/InvalidRequestBodyResponse'
        409:
          description: User with the same username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /users/login:
    post:
      tags:
        - Users
      summary: Logs a user in
      operationId: login
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
      responses:
        200:
          description: User was logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUserResponse'
        400:
          description: Invalid username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: No user with that email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /users/{username}:
    get:
      tags:
        - Users
      summary: Gets a user by username
      operationId: getUser
      parameters:
        - name: username
          in: path
          description: User username
          required: true
          schema:
            type: string
      responses:
        200:
          description: User was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Invalid user username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: User was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /games:
    get:
      tags:
        - Games
      summary: Gets all games
      operationId: getGames
      parameters:
        - name: skip
          in: query
          description: Number of entities to skip
          required: false
          schema:
            type: integer
            default: 0

        - name: limit
          in: query
          description: Number of entities that are returned
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Games were found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GamesResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

    post:
      tags:
        - Games
      summary: Create a game
      operationId: createGame
      requestBody:
        description: Created game object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGameRequest'
      responses:
        201:
          description: Game was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateGameResponse'
        400:
          $ref: '#/components/responses/InvalidRequestBodyResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /games/{gameId}:
    get:
      tags:
        - Games
      summary: Gets a game by id
      operationId: getGame
      parameters:
        - name: gameId
          in: path
          description: Game id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Game was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        400:
          description: Invalid game id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Game was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /games/{gameId}/state:
    get:
      tags:
        - Games
      summary: Gets a game state by id
      operationId: getGameState
      parameters:
        - name: gameId
          in: path
          description: Game id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Game was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameState'
        400:
          description: Invalid game id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Game was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /games/{gameId}/join:
    post:
      tags:
        - Games
      summary: Join a game
      operationId: joinGame
      parameters:
        - name: gameId
          in: path
          description: Game id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User joined the game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JoinGameResponse'
        400:
          description: Invalid game id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Game was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /games/{gameId}/players/self/fleet:
    get:
      tags:
        - Players
      summary: Gets the player's fleet
      operationId: getFleet
      parameters:
        - name: gameId
          in: path
          description: Game id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Game was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fleet'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

    post:
      tags:
        - Players
      summary: Deploy a fleet
      operationId: deployFleet
      parameters:
        - name: gameId
          in: path
          description: Game id
          required: true
          schema:
            type: integer
      requestBody:
        description: Fleet object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeployFleetRequest'
      responses:
        201:
          description: Fleet was deployed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeployFleetResponse'
        400:
          $ref: '#/components/responses/InvalidRequestBodyResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /games/{gameId}/players/opponent/fleet:
    get:
      tags:
        - Players
      summary: Gets the opponent's fleet
      operationId: getOpponentFleet
      parameters:
        - name: gameId
          in: path
          description: Game id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Game was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fleet'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /games/{gameId}/players/self/shots:
    get:
      tags:
        - Players
      summary: Gets the player's shots
      operationId: getShots
      parameters:
        - name: gameId
          in: path
          description: Game id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Game was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShotsResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

    post:
      tags:
        - Players
      summary: Create shots
      operationId: createShots
      parameters:
        - name: gameId
          in: path
          description: Game id
          required: true
          schema:
            type: integer
      requestBody:
        description: Shots object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateShotsRequest'
      responses:
        201:
          description: Fleet was deployed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateShotsResponse'
        400:
          $ref: '#/components/responses/InvalidRequestBodyResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /games/{gameId}/players/opponent/shots:
    get:
      tags:
        - Players
      summary: Gets the opponent's shots
      operationId: getOpponentShots
      parameters:
        - name: gameId
          in: path
          description: Game id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Game was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShotsResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'


components:
  responses:
    InternalServerErrorResponse:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            description: Internal server error
            required:
              - name
              - description
            properties:
              name:
                type: string
                description: Error name
                example: INTERNAL_ERROR
              description:
                type: string
                description: Error description message
                example: An internal error occurred

    InvalidRequestBodyResponse:
      description: Invalid request body
      content:
        application/json:
          schema:
            type: object
            description: Invalid request body error
            required:
              - name
              - description
            properties:
              name:
                type: string
                description: Error name
                example: BAD_REQUEST
              description:
                type: string
                description: Error description message
                example: The request body is not valid
              extraInfo:
                type: string
                description: Extra error info
                example: Route id must be positive


  schemas:
    User:
      type: object
      description: User object
      required:
        - username
        - points
      properties:
        username:
          type: string
          description: User name
          example: André Jesus
        points:
          type: integer
          description: User points
          example: 100

    CreateUserRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: User username
          example: André Páscoa
        password:
          type: string
          description: User password
          example: LittleHomie123

    CreateUserResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: User token
          example: 663f6889-e7b8-4eb4-8698-38d72de4a956

    LoginUserRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: User username
          example: andrepascoa
        password:
          type: string
          description: User password
          example: "LittleHomie123"

    LoginUserResponse:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: User token
          example: 663f6889-e7b8-4eb4-8698-38d72de4a956

    UsersResponse:
      type: object
      required:
        - users
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/User'
        totalCount:
          type: integer
          example: 10

    AppError:
      type: object
      description: Application error
      required:
        - name
        - description
      properties:
        name:
          type: string
          description: Error name
          example: FAIL
        description:
          type: string
          description: Error description message
          example: An error occurred
        extraInfo:
          type: string
          description: Extra error info
          example: "User not found"

    Game:
      type: object
      description: Game object
      # TODO: Add required properties

    CreateGameRequest:
      type: object
      # TODO: Add required properties

    CreateGameResponse:
      type: object
      # TODO: Add required properties

    GamesResponse:
      type: object
      required:
        - games
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/Game'
        totalCount:
          type: integer
          example: 10

    GameState:
      type: object
      description: Game state object
      # TODO: Add required properties

    JoinGameResponse:
      type: object
      # TODO: Add required properties

    Fleet:
      type: object
      description: Fleet object
      # TODO: Add required properties

    DeployFleetRequest:
      type: object
      # TODO: Add required properties

    DeployFleetResponse:
      type: object
      # TODO: Add required properties

    ShotsResponse:
      type: object
      # TODO: Add required properties

    CreateShotsRequest:
      type: object
      # TODO: Add required properties

    CreateShotsResponse:
      type: object
      # TODO: Add required properties


  securitySchemes:
    token:
      type: http
      scheme: bearer