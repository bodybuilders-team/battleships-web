openapi: 3.0.3
info:
  version: 0.0.1
  title: Battleships API
  description: Web-based system that allows multiple players to play the Battleship game.
  termsOfService: https://swagger.io/terms/

servers:
  - url: http://localhost:8888/api

tags:
  - name: Home
    description: Home page

  - name: Users
    description: Operations about users

  - name: Games
    description: Operations about games

  - name: Players
    description: Operations about players (players are users who are playing a game)


paths:
  /:
    get:
      tags:
        - Home
      summary: Home page
      operationId: home
      responses:
        '200':
          description: Home page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Home'

  /users:
    post:
      tags:
        - Users
      summary: Create user
      operationId: createUser
      requestBody:
        description: Created user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserInputModel'
      responses:
        201:
          description: User was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserOutputModel'
        400:
          $ref: '#/components/responses/InvalidRequestBodyResponse'
        409:
          description: User with the same username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /users/login:
    post:
      tags:
        - Users
      summary: Logs a user in
      operationId: login
      requestBody:
        description: User credentials
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserInputModel'
      responses:
        200:
          description: User was logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUserOutputModel'
        400:
          description: Invalid username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: No user with that email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /users/{username}:
    get:
      tags:
        - Users
      summary: Gets a user by username
      operationId: getUser
      parameters:
        - name: username
          in: path
          description: User username
          required: true
          schema:
            type: string
      responses:
        200:
          description: User was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
        400:
          description: Invalid user username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: User was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /games:
    get:
      tags:
        - Games
      summary: Gets all games
      operationId: getGames
      parameters:
        - name: skip
          in: query
          description: Number of entities to skip
          required: false
          schema:
            type: integer
            default: 0

        - name: limit
          in: query
          description: Number of entities that are returned
          required: false
          schema:
            type: integer
            default: 10
      responses:
        200:
          description: Games were found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GamesOutputModel'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

    post:
      tags:
        - Games
      summary: Create a game
      operationId: createGame
      requestBody:
        description: Created game object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGameInputModel'
      responses:
        201:
          description: Game was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateGameOutputModel'
        400:
          $ref: '#/components/responses/InvalidRequestBodyResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /games/matchmake:
    post:
      tags:
        - Games
      summary: Matchmake a game
      operationId: matchmake
      requestBody:
        description: Configuration of the game to be matched
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GameConfigModel'
      responses:
        200:
          description: Game was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatchmakeModel'
        400:
          $ref: '#/components/responses/InvalidRequestBodyResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /games/{gameId}:
    get:
      tags:
        - Games
      summary: Gets a game by id
      operationId: getGame
      parameters:
        - name: gameId
          in: path
          description: Game id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Game was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameModel'
        400:
          description: Invalid game id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Game was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /games/{gameId}/state:
    get:
      tags:
        - Games
      summary: Gets a game state by id
      operationId: getGameState
      parameters:
        - name: gameId
          in: path
          description: Game id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Game was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameStateModel'
        400:
          description: Invalid game id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Game was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /games/{gameId}/join:
    post:
      tags:
        - Games
      summary: Join a game
      operationId: joinGame
      parameters:
        - name: gameId
          in: path
          description: Game id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User joined the game
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameModel'
        400:
          description: Invalid game id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        404:
          description: Game was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /games/{gameId}/players/self/fleet:
    get:
      tags:
        - Players
      summary: Gets the player's fleet
      operationId: getFleet
      parameters:
        - name: gameId
          in: path
          description: Game id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Game was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputShipsModel'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

    post:
      tags:
        - Players
      summary: Deploy a fleet
      operationId: deployFleet
      parameters:
        - name: gameId
          in: path
          description: Game id
          required: true
          schema:
            type: integer
      requestBody:
        description: Fleet object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeployFleetInputModel'
      responses:
        400:
          $ref: '#/components/responses/InvalidRequestBodyResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /games/{gameId}/players/opponent/fleet:
    get:
      tags:
        - Players
      summary: Gets the opponent's fleet
      operationId: getOpponentFleet
      parameters:
        - name: gameId
          in: path
          description: Game id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Game was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputShipsModel'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /games/{gameId}/players/self/shots:
    get:
      tags:
        - Players
      summary: Gets the player's shots
      operationId: getShots
      parameters:
        - name: gameId
          in: path
          description: Game id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Game was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputShotsModel'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

    post:
      tags:
        - Players
      summary: Create shots
      operationId: createShots
      parameters:
        - name: gameId
          in: path
          description: Game id
          required: true
          schema:
            type: integer
      requestBody:
        description: Shots object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateShotsInputModel'
      responses:
        201:
          description: Fleet was deployed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateShotsInputModel'
        400:
          $ref: '#/components/responses/InvalidRequestBodyResponse'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'

  /games/{gameId}/players/opponent/shots:
    get:
      tags:
        - Players
      summary: Gets the opponent's shots
      operationId: getOpponentShots
      parameters:
        - name: gameId
          in: path
          description: Game id
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Game was found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputShotsModel'
        500:
          $ref: '#/components/responses/InternalServerErrorResponse'


components:
  responses:
    InternalServerErrorResponse:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            description: Internal server error
            required:
              - name
              - description
            properties:
              name:
                type: string
                description: Error name
                example: INTERNAL_ERROR
              description:
                type: string
                description: Error description message
                example: An internal error occurred

    InvalidRequestBodyResponse:
      description: Invalid request body
      content:
        application/json:
          schema:
            type: object
            description: Invalid request body error
            required:
              - name
              - description
            properties:
              name:
                type: string
                description: Error name
                example: BAD_REQUEST
              description:
                type: string
                description: Error description message
                example: The request body is not valid
              extraInfo:
                type: string
                description: Extra error info
                example: Route id must be positive


  schemas:
    Home:
      type: object
      description: Home object
      required:
        - name
        - version
        - description
        - authors
        - repository
        - links
      properties:
        name:
          type: string
          description: Name of the API
          example: Battleship API
        version:
          type: string
          description: Version of the API
          example: 1.0.0
        description:
          type: string
          description: Description of the API
          example: A simple battleship API
        authors:
          type: array
          description: Authors of the API
          items:
            $ref: '#/components/schemas/Author'
        repository:
          type: object
          description: Repository of the API
          required:
            - type
            - url
          properties:
            type:
              type: string
              description: Type of repository
              example: git
            url:
              type: string
              description: URL of the repository
              example: https://github.com/isel-leic-daw/2022-daw-leic51d-g03
        links:
          type: array
          description: Links of the API
          items:
            $ref: '#/components/schemas/Link'

    Author:
      type: object
      description: Author object
      required:
        - name
        - email
        - githut
      properties:
        name:
          type: string
          description: Name of the author
          example: John Doe
        email:
          type: string
          description: Email of the author
          example: john@doe.org
        github:
          type: string
          description: Github of the author
          example: https://github.com/johndoe

    Link:
      type: object
      description: Link object
      required:
        - rel
        - href
        - method
        - requiresAuth
      properties:
        rel:
          type: string
          description: Relation of the link
          example: self
        href:
          type: string
          description: URL of the link
          example: /games
        method:
          type: string
          description: Method of the link
          example: GET
        requiresAuth:
          type: boolean
          description: If the link requires authentication
          example: false

    UserModel:
      type: object
      description: User object
      required:
        - username
        - email
        - points
      properties:
        username:
          type: string
          description: User name
          example: André Jesus
        email:
          type: string
          description: User email
          example: andre@pascoa.org
        points:
          type: integer
          description: User points
          example: 100

    CreateUserInputModel:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          description: User username
          example: André Páscoa
        email:
          type: string
          description: User email
          example: andre@pascoa.org
        password:
          type: string
          description: User password
          example: LittleHomie123

    CreateUserOutputModel:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: User token
          example: 663f6889-e7b8-4eb4-8698-38d72de4a956

    LoginUserInputModel:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: User username
          example: andrepascoa
        password:
          type: string
          description: User password
          example: "LittleHomie123"

    LoginUserOutputModel:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          description: User token
          example: 663f6889-e7b8-4eb4-8698-38d72de4a956


    GameModel:
      type: object
      description: Game object
      required:
        - id
        - name
        - creator
        - config
        - state
        - players
      properties:
        id:
          type: integer
          description: Game id
          example: 1
        name:
          type: string
          description: Game name
          example: "Game 1"
        creator:
          type: string
          description: Game creator username
          example: "andrepascoa"
        config:
          $ref: '#/components/schemas/GameConfigModel'
        state:
          $ref: '#/components/schemas/GameStateModel'
        players:
          type: array
          items:
            $ref: '#/components/schemas/PlayerModel'

    CreateGameInputModel:
      type: object
      required:
        - name
        - config
      properties:
        name:
          type: string
          description: Game name
          example: "Game 1"
        config:
          $ref: '#/components/schemas/GameConfigModel'

    CreateGameOutputModel:
      type: object
      required:
        - gameId
      properties:
        gameId:
          type: integer
          description: Game id
          example: 1

    GamesOutputModel:
      type: object
      required:
        - games
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/GameModel'
        totalCount:
          type: integer
          example: 10

    MatchmakeModel:
      type: object
      required:
        - game
        - wasCreated
      properties:
        game:
          $ref: '#/components/schemas/GameModel'
        wasCreated:
          type: boolean
          description: Whether the game was created or not
          example: true

    GameConfigModel:
      type: object
      description: Game configuration
      required:
        - gridSize
        - maxTimeForLayoutPhase
        - shotsPerRound
        - maxTimePerShot
        - shipTypes
      properties:
        gridSize:
          type: integer
          description: Grid size
          example: 10
        maxTimeForLayoutPhase:
          type: integer
          description: Max time for layout phase
          example: 60
        shotsPerRound:
          type: integer
          description: Shots per round
          example: 10
        maxTimePerShot:
          type: integer
          description: Max time per shot
          example: 10
        shipTypes:
          type: array
          items:
            $ref: '#/components/schemas/ShipType'

    GameStateModel:
      type: object
      description: Game state object
      required:
        - phase
        - round
        - turn
        - winner
      properties:
        phase:
          type: string
          description: Game phase
          example: "WAITING_FOR_PLAYERS"
        round:
          type: integer
          description: Game round
          example: 1
        turn:
          type: string
          description: Game turn
          example: "andrepascoa"
        winner:
          type: string
          description: Game winner
          example: "andrepascoa"

    DeployFleetInputModel:
      type: object
      required:
        - ships
      properties:
        ships:
          type: array
          items:
            $ref: '#/components/schemas/InputShipModel'

    InputShipModel:
      type: object
      description: Ship object
      required:
        - type
        - coordinate
        - orientation
      properties:
        type:
          type: string
          description: Ship type
          example: "CARRIER"
        coordinate:
          $ref: '#/components/schemas/CoordinateModel'
        orientation:
          type: string
          description: Ship orientation
          example: "H"

    OutputShipModel:
      type: object
      description: Ship response object
      required:
        - type
        - coordinate
        - orientation
        - lives
      properties:
        type:
          type: string
          description: Ship type
          example: "CARRIER"
        coordinate:
          $ref: '#/components/schemas/CoordinateModel'
        orientation:
          type: string
          description: Ship orientation
          example: "H"
        lives:
          type: integer
          description: Ship lives
          example: 5

    OutputShipsModel:
      type: object
      description: Ships response object
      required:
        - ships
      properties:
        ships:
          type: array
          items:
            $ref: '#/components/schemas/OutputShipModel'

    ShipType:
      type: object
      description: Ship type object
      required:
        - shipName
        - size
        - quantity
        - points
      properties:
        shipName:
          type: string
          description: Ship name
          example: "CARRIER"
        size:
          type: integer
          description: Ship size
          example: 5
        quantity:
          type: integer
          description: Quantity of ships of this type
          example: 1
        points:
          type: integer
          description: Ship points
          example: 5


    InputShotModel:
      type: object
      description: Shot object
      required:
        - coordinate
      properties:
        coordinate:
          $ref: '#/components/schemas/CoordinateModel'

    OutputShotModel:
      type: object
      required:
        - coordinate
        - round
        - result
      properties:
        coordinate:
          $ref: '#/components/schemas/CoordinateModel'
        round:
          type: integer
          description: Shot round
          example: 1
        result:
          $ref: '#/components/schemas/ShotResultModel'

    OutputShotsModel:
      type: object
      required:
        - shots
      properties:
        shots:
          type: array
          items:
            $ref: '#/components/schemas/OutputShotModel'
        totalCount:
          type: integer
          example: 10

    CreateShotsInputModel:
      type: object
      required:
        - shots
      properties:
        shots:
          type: array
          items:
            $ref: '#/components/schemas/CoordinateModel'

    ShotResultModel:
      type: object
      required:
        - result
      properties:
        result:
          type: string
          description: Shot result
          example: "HIT"

    CoordinateModel:
      type: object
      description: Coordinate object
      required:
        - col
        - row
      properties:
        col:
          type: string
          description: Column
          example: A
        row:
          type: integer
          description: Row
          example: 1

    PlayerModel:
      type: object
      description: Player object
      required:
        - username
        - points
      properties:
        username:
          type: string
          description: Player username
          example: "andrepascoa"
        points:
          type: integer
          description: Player points
          example: 10


  securitySchemes:
    token:
      type: http
      scheme: bearer